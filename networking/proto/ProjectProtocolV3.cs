//// <auto-generated>
////     generated by the protocol buffer compiler.  do not edit!
////     source: projectprotocol_v3.proto
//// </auto-generated>
//#pragma warning disable 1591, 0612, 3021, 8981
//#region designer generated code

//using pb = global::google.protobuf;
//using pbc = global::google.protobuf.collections;
//using pbr = global::google.protobuf.reflection;
//using scg = global::system.collections.generic;
//namespace org.example
//{

//    /// <summary>holder for reflection information generated from projectprotocol_v3.proto</summary>
//    public static partial class projectprotocolv3reflection
//    {

//        #region descriptor
//        /// <summary>file descriptor for projectprotocol_v3.proto</summary>
//        public static pbr::filedescriptor descriptor
//        {
//            get { return descriptor; }
//        }
//        private static pbr::filedescriptor descriptor;

//        static projectprotocolv3reflection()
//        {
//            byte[] descriptordata = global::system.convert.frombase64string(
//                string.concat(
//                  "chhqcm9qzwn0uhjvdg9jb2xfdjmuchjvdg8sc29yzy5legftcgxlgh9nb29n",
//                  "bguvchjvdg9idwyvdgltzxn0yw1wlnbyb3rvijokbkfnzw5jeriqcgh1c2vy",
//                  "bmftzrgbiaeocrimcgruyw1lgaigasgjehakchbhc3n3b3jkgamgasgjijmk",
//                  "bknsawvudbikcgjpzbgbiaeoaximcgruyw1lgaigasgjeg8kb2fkzhjlc3my",
//                  "ayabkakigqekbkzsawdodbikcgjpzbgbiaeoaxitcgtkzxn0aw5hdglvbhgc",
//                  "iaeocritcglkzxbhcnr1cmuybcabkasygi5nb29nbguuchjvdg9idwyuvglt",
//                  "zxn0yw1weg8kb2fpcnbvcnqybsabkaksfgooyxzhawxhymxlu2vhdhmybiab",
//                  "kauicwohqm9va2luzxikcgjpzbgbiaeoaxijcgzjbgllbnqyaiabkasyey5v",
//                  "cmcuzxhhbxbszs5dbgllbnqsiwogzmxpz2h0gamgasglmhmub3jnlmv4yw1w",
//                  "bguurmxpz2h0ehikcnbhc3nlbmdlcnmybcadkakivwikdlbyb2ply3rszxf1",
//                  "zxn0ei4kbhr5cguyasabka4yic5vcmcuzxhhbxbszs5qcm9qzwn0umvxdwvz",
//                  "dc5uexbleiukbmfnzw5jergciaeoczitlm9yzy5legftcgxllkfnzw5jeuga",
//                  "eiukbmzsawdodbgdiaeoczitlm9yzy5legftcgxllkzsawdodegaeickb2jv",
//                  "b2tpbmcybcabkasyfc5vcmcuzxhhbxbszs5cb29raw5nsaaiewoevhlwzril",
//                  "cgdvbmtub3dueaascqoftg9naw4qarikcgzmb2dvdxqqahircg1hzxrbbgxg",
//                  "bglnahrzeamsfgosr2v0rmlsdgvyzwrgbglnahrzeaqsfaoqr2v0tnvtymvy",
//                  "t2ztzwf0cxafeg4kckjvb2tuawnrzxqqbkijcgdwyxlsb2fkipyccg9qcm9q",
//                  "zwn0umvzcg9uc2uslwoedhlwzrgbiaeodjihlm9yzy5legftcgxlllbyb2pl",
//                  "y3rszxnwb25zzs5uexbleg0kbwvycm9ygaigasgjeiqkb2zsawdodhmyayad",
//                  "kasyey5vcmcuzxhhbxbszs5gbglnahqsiwogzmxpz2h0gaqgasglmhmub3jn",
//                  "lmv4yw1wbguurmxpz2h0eg4kbm51bwjlchgfiaeobsjocgruexblegskb1vu",
//                  "a25vd24qabigcgjpaxabegkkbuvycm9yeaiscwohrmxpz2h0cxadehmkd0zp",
//                  "bhrlcmvkrmxpz2h0cxaeehekdu51bwjlck9mu2vhdhmqbrilcgdcb29raw5n",
//                  "eazcjaoub3jnlmv4yw1wbguuchjvdg9idwzcdfbyb2ply3rqcm90b2igchjv",
//                  "dg8z"));
//            descriptor = pbr::filedescriptor.fromgeneratedcode(descriptordata,
//                new pbr::filedescriptor[] { global::google.protobuf.wellknowntypes.timestampreflection.descriptor, },
//                new pbr::generatedclrtypeinfo(null, null, new pbr::generatedclrtypeinfo[] {
//            new pbr::generatedclrtypeinfo(typeof(global::org.example.agency), global::org.example.agency.parser, new[]{ "username", "name", "password" }, null, null, null, null),
//            new pbr::generatedclrtypeinfo(typeof(global::org.example.client), global::org.example.client.parser, new[]{ "id", "name", "address" }, null, null, null, null),
//            new pbr::generatedclrtypeinfo(typeof(global::org.example.flight), global::org.example.flight.parser, new[]{ "id", "destination", "departure", "airport", "availableseats" }, null, null, null, null),
//            new pbr::generatedclrtypeinfo(typeof(global::org.example.booking), global::org.example.booking.parser, new[]{ "id", "client", "flight", "passengers" }, null, null, null, null),
//            new pbr::generatedclrtypeinfo(typeof(global::org.example.projectrequest), global::org.example.projectrequest.parser, new[]{ "type", "agency", "flight", "booking" }, new[]{ "payload" }, new[]{ typeof(global::org.example.projectrequest.types.type) }, null, null),
//            new pbr::generatedclrtypeinfo(typeof(global::org.example.projectresponse), global::org.example.projectresponse.parser, new[]{ "type", "error", "flights", "flight", "number" }, null, new[]{ typeof(global::org.example.projectresponse.types.type) }, null, null)
//                }));
//        }
//        #endregion

//    }
//    #region messages
//    public sealed partial class agency : pb::imessage<agency>
//#if !google_protobuf_refstruct_compatibility_mode
//        , pb::ibuffermessage
//#endif
//    {
//        private static readonly pb::messageparser<agency> _parser = new pb::messageparser<agency>(() => new agency());
//        private pb::unknownfieldset _unknownfields;
//        [global::system.diagnostics.debuggernonusercodeattribute]
//        [global::system.codedom.compiler.generatedcode("protoc", null)]
//        public static pb::messageparser<agency> parser { get { return _parser; } }

//        [global::system.diagnostics.debuggernonusercodeattribute]
//        [global::system.codedom.compiler.generatedcode("protoc", null)]
//        public static pbr::messagedescriptor descriptor
//        {
//            get { return global::org.example.projectprotocolv3reflection.descriptor.messagetypes[0]; }
//        }

//        [global::system.diagnostics.debuggernonusercodeattribute]
//        [global::system.codedom.compiler.generatedcode("protoc", null)]
//        pbr::messagedescriptor pb::imessage.descriptor
//        {
//            get { return descriptor; }
//        }

//        [global::system.diagnostics.debuggernonusercodeattribute]
//        [global::system.codedom.compiler.generatedcode("protoc", null)]
//        public agency()
//        {
//            onconstruction();
//        }

//        partial void onconstruction();

//        [global::system.diagnostics.debuggernonusercodeattribute]
//        [global::system.codedom.compiler.generatedcode("protoc", null)]
//        public agency(agency other) : this()
//        {
//            username_ = other.username_;
//            name_ = other.name_;
//            password_ = other.password_;
//            _unknownfields = pb::unknownfieldset.clone(other._unknownfields);
//        }

//        [global::system.diagnostics.debuggernonusercodeattribute]
//        [global::system.codedom.compiler.generatedcode("protoc", null)]
//        public agency clone()
//        {
//            return new agency(this);
//        }

//        /// <summary>field number for the "username" field.</summary>
//        public const int usernamefieldnumber = 1;
//        private string username_ = "";
//        [global::system.diagnostics.debuggernonusercodeattribute]
//        [global::system.codedom.compiler.generatedcode("protoc", null)]
//        public string username
//        {
//            get { return username_; }
//            set
//            {
//                username_ = pb::protopreconditions.checknotnull(value, "value");
//            }
//        }

//        /// <summary>field number for the "name" field.</summary>
//        public const int namefieldnumber = 2;
//        private string name_ = "";
//        [global::system.diagnostics.debuggernonusercodeattribute]
//        [global::system.codedom.compiler.generatedcode("protoc", null)]
//        public string name
//        {
//            get { return name_; }
//            set
//            {
//                name_ = pb::protopreconditions.checknotnull(value, "value");
//            }
//        }

//        /// <summary>field number for the "password" field.</summary>
//        public const int passwordfieldnumber = 3;
//        private string password_ = "";
//        [global::system.diagnostics.debuggernonusercodeattribute]
//        [global::system.codedom.compiler.generatedcode("protoc", null)]
//        public string password
//        {
//            get { return password_; }
//            set
//            {
//                password_ = pb::protopreconditions.checknotnull(value, "value");
//            }
//        }

//        [global::system.diagnostics.debuggernonusercodeattribute]
//        [global::system.codedom.compiler.generatedcode("protoc", null)]
//        public override bool equals(object other)
//        {
//            return equals(other as agency);
//        }

//        [global::system.diagnostics.debuggernonusercodeattribute]
//        [global::system.codedom.compiler.generatedcode("protoc", null)]
//        public bool equals(agency other)
//        {
//            if (referenceequals(other, null))
//            {
//                return false;
//            }
//            if (referenceequals(other, this))
//            {
//                return true;
//            }
//            if (username != other.username) return false;
//            if (name != other.name) return false;
//            if (password != other.password) return false;
//            return equals(_unknownfields, other._unknownfields);
//        }

//        [global::system.diagnostics.debuggernonusercodeattribute]
//        [global::system.codedom.compiler.generatedcode("protoc", null)]
//        public override int gethashcode()
//        {
//            int hash = 1;
//            if (username.length != 0) hash ^= username.gethashcode();
//            if (name.length != 0) hash ^= name.gethashcode();
//            if (password.length != 0) hash ^= password.gethashcode();
//            if (_unknownfields != null)
//            {
//                hash ^= _unknownfields.gethashcode();
//            }
//            return hash;
//        }

//        [global::system.diagnostics.debuggernonusercodeattribute]
//        [global::system.codedom.compiler.generatedcode("protoc", null)]
//        public override string tostring()
//        {
//            return pb::jsonformatter.todiagnosticstring(this);
//        }

//        [global::system.diagnostics.debuggernonusercodeattribute]
//        [global::system.codedom.compiler.generatedcode("protoc", null)]
//        public void writeto(pb::codedoutputstream output)
//        {
//#if !google_protobuf_refstruct_compatibility_mode
//            output.writerawmessage(this);
//#else
//      if (username.length != 0) {
//        output.writerawtag(10);
//        output.writestring(username);
//      }
//      if (name.length != 0) {
//        output.writerawtag(18);
//        output.writestring(name);
//      }
//      if (password.length != 0) {
//        output.writerawtag(26);
//        output.writestring(password);
//      }
//      if (_unknownfields != null) {
//        _unknownfields.writeto(output);
//      }
//#endif
//        }

//#if !google_protobuf_refstruct_compatibility_mode
//        [global::system.diagnostics.debuggernonusercodeattribute]
//        [global::system.codedom.compiler.generatedcode("protoc", null)]
//        void pb::ibuffermessage.internalwriteto(ref pb::writecontext output)
//        {
//            if (username.length != 0)
//            {
//                output.writerawtag(10);
//                output.writestring(username);
//            }
//            if (name.length != 0)
//            {
//                output.writerawtag(18);
//                output.writestring(name);
//            }
//            if (password.length != 0)
//            {
//                output.writerawtag(26);
//                output.writestring(password);
//            }
//            if (_unknownfields != null)
//            {
//                _unknownfields.writeto(ref output);
//            }
//        }
//#endif

//        [global::system.diagnostics.debuggernonusercodeattribute]
//        [global::system.codedom.compiler.generatedcode("protoc", null)]
//        public int calculatesize()
//        {
//            int size = 0;
//            if (username.length != 0)
//            {
//                size += 1 + pb::codedoutputstream.computestringsize(username);
//            }
//            if (name.length != 0)
//            {
//                size += 1 + pb::codedoutputstream.computestringsize(name);
//            }
//            if (password.length != 0)
//            {
//                size += 1 + pb::codedoutputstream.computestringsize(password);
//            }
//            if (_unknownfields != null)
//            {
//                size += _unknownfields.calculatesize();
//            }
//            return size;
//        }

//        [global::system.diagnostics.debuggernonusercodeattribute]
//        [global::system.codedom.compiler.generatedcode("protoc", null)]
//        public void mergefrom(agency other)
//        {
//            if (other == null)
//            {
//                return;
//            }
//            if (other.username.length != 0)
//            {
//                username = other.username;
//            }
//            if (other.name.length != 0)
//            {
//                name = other.name;
//            }
//            if (other.password.length != 0)
//            {
//                password = other.password;
//            }
//            _unknownfields = pb::unknownfieldset.mergefrom(_unknownfields, other._unknownfields);
//        }

//        [global::system.diagnostics.debuggernonusercodeattribute]
//        [global::system.codedom.compiler.generatedcode("protoc", null)]
//        public void mergefrom(pb::codedinputstream input)
//        {
//#if !google_protobuf_refstruct_compatibility_mode
//            input.readrawmessage(this);
//#else
//      uint tag;
//      while ((tag = input.readtag()) != 0) {
//        switch(tag) {
//          default:
//            _unknownfields = pb::unknownfieldset.mergefieldfrom(_unknownfields, input);
//            break;
//          case 10: {
//            username = input.readstring();
//            break;
//          }
//          case 18: {
//            name = input.readstring();
//            break;
//          }
//          case 26: {
//            password = input.readstring();
//            break;
//          }
//        }
//      }
//#endif
//        }

//#if !google_protobuf_refstruct_compatibility_mode
//        [global::system.diagnostics.debuggernonusercodeattribute]
//        [global::system.codedom.compiler.generatedcode("protoc", null)]
//        void pb::ibuffermessage.internalmergefrom(ref pb::parsecontext input)
//        {
//            uint tag;
//            while ((tag = input.readtag()) != 0)
//            {
//                switch (tag)
//                {
//                    default:
//                        _unknownfields = pb::unknownfieldset.mergefieldfrom(_unknownfields, ref input);
//                        break;
//                    case 10:
//                        {
//                            username = input.readstring();
//                            break;
//                        }
//                    case 18:
//                        {
//                            name = input.readstring();
//                            break;
//                        }
//                    case 26:
//                        {
//                            password = input.readstring();
//                            break;
//                        }
//                }
//            }
//        }
//#endif

//    }

//    public sealed partial class client : pb::imessage<client>
//#if !google_protobuf_refstruct_compatibility_mode
//        , pb::ibuffermessage
//#endif
//    {
//        private static readonly pb::messageparser<client> _parser = new pb::messageparser<client>(() => new client());
//        private pb::unknownfieldset _unknownfields;
//        [global::system.diagnostics.debuggernonusercodeattribute]
//        [global::system.codedom.compiler.generatedcode("protoc", null)]
//        public static pb::messageparser<client> parser { get { return _parser; } }

//        [global::system.diagnostics.debuggernonusercodeattribute]
//        [global::system.codedom.compiler.generatedcode("protoc", null)]
//        public static pbr::messagedescriptor descriptor
//        {
//            get { return global::org.example.projectprotocolv3reflection.descriptor.messagetypes[1]; }
//        }

//        [global::system.diagnostics.debuggernonusercodeattribute]
//        [global::system.codedom.compiler.generatedcode("protoc", null)]
//        pbr::messagedescriptor pb::imessage.descriptor
//        {
//            get { return descriptor; }
//        }

//        [global::system.diagnostics.debuggernonusercodeattribute]
//        [global::system.codedom.compiler.generatedcode("protoc", null)]
//        public client()
//        {
//            onconstruction();
//        }

//        partial void onconstruction();

//        [global::system.diagnostics.debuggernonusercodeattribute]
//        [global::system.codedom.compiler.generatedcode("protoc", null)]
//        public client(client other) : this()
//        {
//            id_ = other.id_;
//            name_ = other.name_;
//            address_ = other.address_;
//            _unknownfields = pb::unknownfieldset.clone(other._unknownfields);
//        }

//        [global::system.diagnostics.debuggernonusercodeattribute]
//        [global::system.codedom.compiler.generatedcode("protoc", null)]
//        public client clone()
//        {
//            return new client(this);
//        }

//        /// <summary>field number for the "id" field.</summary>
//        public const int idfieldnumber = 1;
//        private long id_;
//        [global::system.diagnostics.debuggernonusercodeattribute]
//        [global::system.codedom.compiler.generatedcode("protoc", null)]
//        public long id
//        {
//            get { return id_; }
//            set
//            {
//                id_ = value;
//            }
//        }

//        /// <summary>field number for the "name" field.</summary>
//        public const int namefieldnumber = 2;
//        private string name_ = "";
//        [global::system.diagnostics.debuggernonusercodeattribute]
//        [global::system.codedom.compiler.generatedcode("protoc", null)]
//        public string name
//        {
//            get { return name_; }
//            set
//            {
//                name_ = pb::protopreconditions.checknotnull(value, "value");
//            }
//        }

//        /// <summary>field number for the "address" field.</summary>
//        public const int addressfieldnumber = 3;
//        private string address_ = "";
//        [global::system.diagnostics.debuggernonusercodeattribute]
//        [global::system.codedom.compiler.generatedcode("protoc", null)]
//        public string address
//        {
//            get { return address_; }
//            set
//            {
//                address_ = pb::protopreconditions.checknotnull(value, "value");
//            }
//        }

//        [global::system.diagnostics.debuggernonusercodeattribute]
//        [global::system.codedom.compiler.generatedcode("protoc", null)]
//        public override bool equals(object other)
//        {
//            return equals(other as client);
//        }

//        [global::system.diagnostics.debuggernonusercodeattribute]
//        [global::system.codedom.compiler.generatedcode("protoc", null)]
//        public bool equals(client other)
//        {
//            if (referenceequals(other, null))
//            {
//                return false;
//            }
//            if (referenceequals(other, this))
//            {
//                return true;
//            }
//            if (id != other.id) return false;
//            if (name != other.name) return false;
//            if (address != other.address) return false;
//            return equals(_unknownfields, other._unknownfields);
//        }

//        [global::system.diagnostics.debuggernonusercodeattribute]
//        [global::system.codedom.compiler.generatedcode("protoc", null)]
//        public override int gethashcode()
//        {
//            int hash = 1;
//            if (id != 0l) hash ^= id.gethashcode();
//            if (name.length != 0) hash ^= name.gethashcode();
//            if (address.length != 0) hash ^= address.gethashcode();
//            if (_unknownfields != null)
//            {
//                hash ^= _unknownfields.gethashcode();
//            }
//            return hash;
//        }

//        [global::system.diagnostics.debuggernonusercodeattribute]
//        [global::system.codedom.compiler.generatedcode("protoc", null)]
//        public override string tostring()
//        {
//            return pb::jsonformatter.todiagnosticstring(this);
//        }

//        [global::system.diagnostics.debuggernonusercodeattribute]
//        [global::system.codedom.compiler.generatedcode("protoc", null)]
//        public void writeto(pb::codedoutputstream output)
//        {
//#if !google_protobuf_refstruct_compatibility_mode
//            output.writerawmessage(this);
//#else
//      if (id != 0l) {
//        output.writerawtag(8);
//        output.writeint64(id);
//      }
//      if (name.length != 0) {
//        output.writerawtag(18);
//        output.writestring(name);
//      }
//      if (address.length != 0) {
//        output.writerawtag(26);
//        output.writestring(address);
//      }
//      if (_unknownfields != null) {
//        _unknownfields.writeto(output);
//      }
//#endif
//        }

//#if !google_protobuf_refstruct_compatibility_mode
//        [global::system.diagnostics.debuggernonusercodeattribute]
//        [global::system.codedom.compiler.generatedcode("protoc", null)]
//        void pb::ibuffermessage.internalwriteto(ref pb::writecontext output)
//        {
//            if (id != 0l)
//            {
//                output.writerawtag(8);
//                output.writeint64(id);
//            }
//            if (name.length != 0)
//            {
//                output.writerawtag(18);
//                output.writestring(name);
//            }
//            if (address.length != 0)
//            {
//                output.writerawtag(26);
//                output.writestring(address);
//            }
//            if (_unknownfields != null)
//            {
//                _unknownfields.writeto(ref output);
//            }
//        }
//#endif

//        [global::system.diagnostics.debuggernonusercodeattribute]
//        [global::system.codedom.compiler.generatedcode("protoc", null)]
//        public int calculatesize()
//        {
//            int size = 0;
//            if (id != 0l)
//            {
//                size += 1 + pb::codedoutputstream.computeint64size(id);
//            }
//            if (name.length != 0)
//            {
//                size += 1 + pb::codedoutputstream.computestringsize(name);
//            }
//            if (address.length != 0)
//            {
//                size += 1 + pb::codedoutputstream.computestringsize(address);
//            }
//            if (_unknownfields != null)
//            {
//                size += _unknownfields.calculatesize();
//            }
//            return size;
//        }

//        [global::system.diagnostics.debuggernonusercodeattribute]
//        [global::system.codedom.compiler.generatedcode("protoc", null)]
//        public void mergefrom(client other)
//        {
//            if (other == null)
//            {
//                return;
//            }
//            if (other.id != 0l)
//            {
//                id = other.id;
//            }
//            if (other.name.length != 0)
//            {
//                name = other.name;
//            }
//            if (other.address.length != 0)
//            {
//                address = other.address;
//            }
//            _unknownfields = pb::unknownfieldset.mergefrom(_unknownfields, other._unknownfields);
//        }

//        [global::system.diagnostics.debuggernonusercodeattribute]
//        [global::system.codedom.compiler.generatedcode("protoc", null)]
//        public void mergefrom(pb::codedinputstream input)
//        {
//#if !google_protobuf_refstruct_compatibility_mode
//            input.readrawmessage(this);
//#else
//      uint tag;
//      while ((tag = input.readtag()) != 0) {
//        switch(tag) {
//          default:
//            _unknownfields = pb::unknownfieldset.mergefieldfrom(_unknownfields, input);
//            break;
//          case 8: {
//            id = input.readint64();
//            break;
//          }
//          case 18: {
//            name = input.readstring();
//            break;
//          }
//          case 26: {
//            address = input.readstring();
//            break;
//          }
//        }
//      }
//#endif
//        }

//#if !google_protobuf_refstruct_compatibility_mode
//        [global::system.diagnostics.debuggernonusercodeattribute]
//        [global::system.codedom.compiler.generatedcode("protoc", null)]
//        void pb::ibuffermessage.internalmergefrom(ref pb::parsecontext input)
//        {
//            uint tag;
//            while ((tag = input.readtag()) != 0)
//            {
//                switch (tag)
//                {
//                    default:
//                        _unknownfields = pb::unknownfieldset.mergefieldfrom(_unknownfields, ref input);
//                        break;
//                    case 8:
//                        {
//                            id = input.readint64();
//                            break;
//                        }
//                    case 18:
//                        {
//                            name = input.readstring();
//                            break;
//                        }
//                    case 26:
//                        {
//                            address = input.readstring();
//                            break;
//                        }
//                }
//            }
//        }
//#endif

//    }

//    public sealed partial class flight : pb::imessage<flight>
//#if !google_protobuf_refstruct_compatibility_mode
//        , pb::ibuffermessage
//#endif
//    {
//        private static readonly pb::messageparser<flight> _parser = new pb::messageparser<flight>(() => new flight());
//        private pb::unknownfieldset _unknownfields;
//        [global::system.diagnostics.debuggernonusercodeattribute]
//        [global::system.codedom.compiler.generatedcode("protoc", null)]
//        public static pb::messageparser<flight> parser { get { return _parser; } }

//        [global::system.diagnostics.debuggernonusercodeattribute]
//        [global::system.codedom.compiler.generatedcode("protoc", null)]
//        public static pbr::messagedescriptor descriptor
//        {
//            get { return global::org.example.projectprotocolv3reflection.descriptor.messagetypes[2]; }
//        }

//        [global::system.diagnostics.debuggernonusercodeattribute]
//        [global::system.codedom.compiler.generatedcode("protoc", null)]
//        pbr::messagedescriptor pb::imessage.descriptor
//        {
//            get { return descriptor; }
//        }

//        [global::system.diagnostics.debuggernonusercodeattribute]
//        [global::system.codedom.compiler.generatedcode("protoc", null)]
//        public flight()
//        {
//            onconstruction();
//        }

//        partial void onconstruction();

//        [global::system.diagnostics.debuggernonusercodeattribute]
//        [global::system.codedom.compiler.generatedcode("protoc", null)]
//        public flight(flight other) : this()
//        {
//            id_ = other.id_;
//            destination_ = other.destination_;
//            departure_ = other.departure_ != null ? other.departure_.clone() : null;
//            airport_ = other.airport_;
//            availableseats_ = other.availableseats_;
//            _unknownfields = pb::unknownfieldset.clone(other._unknownfields);
//        }

//        [global::system.diagnostics.debuggernonusercodeattribute]
//        [global::system.codedom.compiler.generatedcode("protoc", null)]
//        public flight clone()
//        {
//            return new flight(this);
//        }

//        /// <summary>field number for the "id" field.</summary>
//        public const int idfieldnumber = 1;
//        private long id_;
//        [global::system.diagnostics.debuggernonusercodeattribute]
//        [global::system.codedom.compiler.generatedcode("protoc", null)]
//        public long id
//        {
//            get { return id_; }
//            set
//            {
//                id_ = value;
//            }
//        }

//        /// <summary>field number for the "destination" field.</summary>
//        public const int destinationfieldnumber = 2;
//        private string destination_ = "";
//        [global::system.diagnostics.debuggernonusercodeattribute]
//        [global::system.codedom.compiler.generatedcode("protoc", null)]
//        public string destination
//        {
//            get { return destination_; }
//            set
//            {
//                destination_ = pb::protopreconditions.checknotnull(value, "value");
//            }
//        }

//        /// <summary>field number for the "departure" field.</summary>
//        public const int departurefieldnumber = 4;
//        private global::google.protobuf.wellknowntypes.timestamp departure_;
//        [global::system.diagnostics.debuggernonusercodeattribute]
//        [global::system.codedom.compiler.generatedcode("protoc", null)]
//        public global::google.protobuf.wellknowntypes.timestamp departure
//        {
//            get { return departure_; }
//            set
//            {
//                departure_ = value;
//            }
//        }

//        /// <summary>field number for the "airport" field.</summary>
//        public const int airportfieldnumber = 5;
//        private string airport_ = "";
//        [global::system.diagnostics.debuggernonusercodeattribute]
//        [global::system.codedom.compiler.generatedcode("protoc", null)]
//        public string airport
//        {
//            get { return airport_; }
//            set
//            {
//                airport_ = pb::protopreconditions.checknotnull(value, "value");
//            }
//        }

//        /// <summary>field number for the "availableseats" field.</summary>
//        public const int availableseatsfieldnumber = 6;
//        private int availableseats_;
//        [global::system.diagnostics.debuggernonusercodeattribute]
//        [global::system.codedom.compiler.generatedcode("protoc", null)]
//        public int availableseats
//        {
//            get { return availableseats_; }
//            set
//            {
//                availableseats_ = value;
//            }
//        }

//        [global::system.diagnostics.debuggernonusercodeattribute]
//        [global::system.codedom.compiler.generatedcode("protoc", null)]
//        public override bool equals(object other)
//        {
//            return equals(other as flight);
//        }

//        [global::system.diagnostics.debuggernonusercodeattribute]
//        [global::system.codedom.compiler.generatedcode("protoc", null)]
//        public bool equals(flight other)
//        {
//            if (referenceequals(other, null))
//            {
//                return false;
//            }
//            if (referenceequals(other, this))
//            {
//                return true;
//            }
//            if (id != other.id) return false;
//            if (destination != other.destination) return false;
//            if (!object.equals(departure, other.departure)) return false;
//            if (airport != other.airport) return false;
//            if (availableseats != other.availableseats) return false;
//            return equals(_unknownfields, other._unknownfields);
//        }

//        [global::system.diagnostics.debuggernonusercodeattribute]
//        [global::system.codedom.compiler.generatedcode("protoc", null)]
//        public override int gethashcode()
//        {
//            int hash = 1;
//            if (id != 0l) hash ^= id.gethashcode();
//            if (destination.length != 0) hash ^= destination.gethashcode();
//            if (departure_ != null) hash ^= departure.gethashcode();
//            if (airport.length != 0) hash ^= airport.gethashcode();
//            if (availableseats != 0) hash ^= availableseats.gethashcode();
//            if (_unknownfields != null)
//            {
//                hash ^= _unknownfields.gethashcode();
//            }
//            return hash;
//        }

//        [global::system.diagnostics.debuggernonusercodeattribute]
//        [global::system.codedom.compiler.generatedcode("protoc", null)]
//        public override string tostring()
//        {
//            return pb::jsonformatter.todiagnosticstring(this);
//        }

//        [global::system.diagnostics.debuggernonusercodeattribute]
//        [global::system.codedom.compiler.generatedcode("protoc", null)]
//        public void writeto(pb::codedoutputstream output)
//        {
//#if !google_protobuf_refstruct_compatibility_mode
//            output.writerawmessage(this);
//#else
//      if (id != 0l) {
//        output.writerawtag(8);
//        output.writeint64(id);
//      }
//      if (destination.length != 0) {
//        output.writerawtag(18);
//        output.writestring(destination);
//      }
//      if (departure_ != null) {
//        output.writerawtag(34);
//        output.writemessage(departure);
//      }
//      if (airport.length != 0) {
//        output.writerawtag(42);
//        output.writestring(airport);
//      }
//      if (availableseats != 0) {
//        output.writerawtag(48);
//        output.writeint32(availableseats);
//      }
//      if (_unknownfields != null) {
//        _unknownfields.writeto(output);
//      }
//#endif
//        }

//#if !google_protobuf_refstruct_compatibility_mode
//        [global::system.diagnostics.debuggernonusercodeattribute]
//        [global::system.codedom.compiler.generatedcode("protoc", null)]
//        void pb::ibuffermessage.internalwriteto(ref pb::writecontext output)
//        {
//            if (id != 0l)
//            {
//                output.writerawtag(8);
//                output.writeint64(id);
//            }
//            if (destination.length != 0)
//            {
//                output.writerawtag(18);
//                output.writestring(destination);
//            }
//            if (departure_ != null)
//            {
//                output.writerawtag(34);
//                output.writemessage(departure);
//            }
//            if (airport.length != 0)
//            {
//                output.writerawtag(42);
//                output.writestring(airport);
//            }
//            if (availableseats != 0)
//            {
//                output.writerawtag(48);
//                output.writeint32(availableseats);
//            }
//            if (_unknownfields != null)
//            {
//                _unknownfields.writeto(ref output);
//            }
//        }
//#endif

//        [global::system.diagnostics.debuggernonusercodeattribute]
//        [global::system.codedom.compiler.generatedcode("protoc", null)]
//        public int calculatesize()
//        {
//            int size = 0;
//            if (id != 0l)
//            {
//                size += 1 + pb::codedoutputstream.computeint64size(id);
//            }
//            if (destination.length != 0)
//            {
//                size += 1 + pb::codedoutputstream.computestringsize(destination);
//            }
//            if (departure_ != null)
//            {
//                size += 1 + pb::codedoutputstream.computemessagesize(departure);
//            }
//            if (airport.length != 0)
//            {
//                size += 1 + pb::codedoutputstream.computestringsize(airport);
//            }
//            if (availableseats != 0)
//            {
//                size += 1 + pb::codedoutputstream.computeint32size(availableseats);
//            }
//            if (_unknownfields != null)
//            {
//                size += _unknownfields.calculatesize();
//            }
//            return size;
//        }

//        [global::system.diagnostics.debuggernonusercodeattribute]
//        [global::system.codedom.compiler.generatedcode("protoc", null)]
//        public void mergefrom(flight other)
//        {
//            if (other == null)
//            {
//                return;
//            }
//            if (other.id != 0l)
//            {
//                id = other.id;
//            }
//            if (other.destination.length != 0)
//            {
//                destination = other.destination;
//            }
//            if (other.departure_ != null)
//            {
//                if (departure_ == null)
//                {
//                    departure = new global::google.protobuf.wellknowntypes.timestamp();
//                }
//                departure.mergefrom(other.departure);
//            }
//            if (other.airport.length != 0)
//            {
//                airport = other.airport;
//            }
//            if (other.availableseats != 0)
//            {
//                availableseats = other.availableseats;
//            }
//            _unknownfields = pb::unknownfieldset.mergefrom(_unknownfields, other._unknownfields);
//        }

//        [global::system.diagnostics.debuggernonusercodeattribute]
//        [global::system.codedom.compiler.generatedcode("protoc", null)]
//        public void mergefrom(pb::codedinputstream input)
//        {
//#if !google_protobuf_refstruct_compatibility_mode
//            input.readrawmessage(this);
//#else
//      uint tag;
//      while ((tag = input.readtag()) != 0) {
//        switch(tag) {
//          default:
//            _unknownfields = pb::unknownfieldset.mergefieldfrom(_unknownfields, input);
//            break;
//          case 8: {
//            id = input.readint64();
//            break;
//          }
//          case 18: {
//            destination = input.readstring();
//            break;
//          }
//          case 34: {
//            if (departure_ == null) {
//              departure = new global::google.protobuf.wellknowntypes.timestamp();
//            }
//            input.readmessage(departure);
//            break;
//          }
//          case 42: {
//            airport = input.readstring();
//            break;
//          }
//          case 48: {
//            availableseats = input.readint32();
//            break;
//          }
//        }
//      }
//#endif
//        }

//#if !google_protobuf_refstruct_compatibility_mode
//        [global::system.diagnostics.debuggernonusercodeattribute]
//        [global::system.codedom.compiler.generatedcode("protoc", null)]
//        void pb::ibuffermessage.internalmergefrom(ref pb::parsecontext input)
//        {
//            uint tag;
//            while ((tag = input.readtag()) != 0)
//            {
//                switch (tag)
//                {
//                    default:
//                        _unknownfields = pb::unknownfieldset.mergefieldfrom(_unknownfields, ref input);
//                        break;
//                    case 8:
//                        {
//                            id = input.readint64();
//                            break;
//                        }
//                    case 18:
//                        {
//                            destination = input.readstring();
//                            break;
//                        }
//                    case 34:
//                        {
//                            if (departure_ == null)
//                            {
//                                departure = new global::google.protobuf.wellknowntypes.timestamp();
//                            }
//                            input.readmessage(departure);
//                            break;
//                        }
//                    case 42:
//                        {
//                            airport = input.readstring();
//                            break;
//                        }
//                    case 48:
//                        {
//                            availableseats = input.readint32();
//                            break;
//                        }
//                }
//            }
//        }
//#endif

//    }

//    public sealed partial class booking : pb::imessage<booking>
//#if !google_protobuf_refstruct_compatibility_mode
//        , pb::ibuffermessage
//#endif
//    {
//        private static readonly pb::messageparser<booking> _parser = new pb::messageparser<booking>(() => new booking());
//        private pb::unknownfieldset _unknownfields;
//        [global::system.diagnostics.debuggernonusercodeattribute]
//        [global::system.codedom.compiler.generatedcode("protoc", null)]
//        public static pb::messageparser<booking> parser { get { return _parser; } }

//        [global::system.diagnostics.debuggernonusercodeattribute]
//        [global::system.codedom.compiler.generatedcode("protoc", null)]
//        public static pbr::messagedescriptor descriptor
//        {
//            get { return global::org.example.projectprotocolv3reflection.descriptor.messagetypes[3]; }
//        }

//        [global::system.diagnostics.debuggernonusercodeattribute]
//        [global::system.codedom.compiler.generatedcode("protoc", null)]
//        pbr::messagedescriptor pb::imessage.descriptor
//        {
//            get { return descriptor; }
//        }

//        [global::system.diagnostics.debuggernonusercodeattribute]
//        [global::system.codedom.compiler.generatedcode("protoc", null)]
//        public booking()
//        {
//            onconstruction();
//        }

//        partial void onconstruction();

//        [global::system.diagnostics.debuggernonusercodeattribute]
//        [global::system.codedom.compiler.generatedcode("protoc", null)]
//        public booking(booking other) : this()
//        {
//            id_ = other.id_;
//            client_ = other.client_ != null ? other.client_.clone() : null;
//            flight_ = other.flight_ != null ? other.flight_.clone() : null;
//            passengers_ = other.passengers_.clone();
//            _unknownfields = pb::unknownfieldset.clone(other._unknownfields);
//        }

//        [global::system.diagnostics.debuggernonusercodeattribute]
//        [global::system.codedom.compiler.generatedcode("protoc", null)]
//        public booking clone()
//        {
//            return new booking(this);
//        }

//        /// <summary>field number for the "id" field.</summary>
//        public const int idfieldnumber = 1;
//        private long id_;
//        [global::system.diagnostics.debuggernonusercodeattribute]
//        [global::system.codedom.compiler.generatedcode("protoc", null)]
//        public long id
//        {
//            get { return id_; }
//            set
//            {
//                id_ = value;
//            }
//        }

//        /// <summary>field number for the "client" field.</summary>
//        public const int clientfieldnumber = 2;
//        private global::org.example.client client_;
//        [global::system.diagnostics.debuggernonusercodeattribute]
//        [global::system.codedom.compiler.generatedcode("protoc", null)]
//        public global::org.example.client client
//        {
//            get { return client_; }
//            set
//            {
//                client_ = value;
//            }
//        }

//        /// <summary>field number for the "flight" field.</summary>
//        public const int flightfieldnumber = 3;
//        private global::org.example.flight flight_;
//        [global::system.diagnostics.debuggernonusercodeattribute]
//        [global::system.codedom.compiler.generatedcode("protoc", null)]
//        public global::org.example.flight flight
//        {
//            get { return flight_; }
//            set
//            {
//                flight_ = value;
//            }
//        }

//        /// <summary>field number for the "passengers" field.</summary>
//        public const int passengersfieldnumber = 4;
//        private static readonly pb::fieldcodec<string> _repeated_passengers_codec
//            = pb::fieldcodec.forstring(34);
//        private readonly pbc::repeatedfield<string> passengers_ = new pbc::repeatedfield<string>();
//        [global::system.diagnostics.debuggernonusercodeattribute]
//        [global::system.codedom.compiler.generatedcode("protoc", null)]
//        public pbc::repeatedfield<string> passengers
//        {
//            get { return passengers_; }
//        }

//        [global::system.diagnostics.debuggernonusercodeattribute]
//        [global::system.codedom.compiler.generatedcode("protoc", null)]
//        public override bool equals(object other)
//        {
//            return equals(other as booking);
//        }

//        [global::system.diagnostics.debuggernonusercodeattribute]
//        [global::system.codedom.compiler.generatedcode("protoc", null)]
//        public bool equals(booking other)
//        {
//            if (referenceequals(other, null))
//            {
//                return false;
//            }
//            if (referenceequals(other, this))
//            {
//                return true;
//            }
//            if (id != other.id) return false;
//            if (!object.equals(client, other.client)) return false;
//            if (!object.equals(flight, other.flight)) return false;
//            if (!passengers_.equals(other.passengers_)) return false;
//            return equals(_unknownfields, other._unknownfields);
//        }

//        [global::system.diagnostics.debuggernonusercodeattribute]
//        [global::system.codedom.compiler.generatedcode("protoc", null)]
//        public override int gethashcode()
//        {
//            int hash = 1;
//            if (id != 0l) hash ^= id.gethashcode();
//            if (client_ != null) hash ^= client.gethashcode();
//            if (flight_ != null) hash ^= flight.gethashcode();
//            hash ^= passengers_.gethashcode();
//            if (_unknownfields != null)
//            {
//                hash ^= _unknownfields.gethashcode();
//            }
//            return hash;
//        }

//        [global::system.diagnostics.debuggernonusercodeattribute]
//        [global::system.codedom.compiler.generatedcode("protoc", null)]
//        public override string tostring()
//        {
//            return pb::jsonformatter.todiagnosticstring(this);
//        }

//        [global::system.diagnostics.debuggernonusercodeattribute]
//        [global::system.codedom.compiler.generatedcode("protoc", null)]
//        public void writeto(pb::codedoutputstream output)
//        {
//#if !google_protobuf_refstruct_compatibility_mode
//            output.writerawmessage(this);
//#else
//      if (id != 0l) {
//        output.writerawtag(8);
//        output.writeint64(id);
//      }
//      if (client_ != null) {
//        output.writerawtag(18);
//        output.writemessage(client);
//      }
//      if (flight_ != null) {
//        output.writerawtag(26);
//        output.writemessage(flight);
//      }
//      passengers_.writeto(output, _repeated_passengers_codec);
//      if (_unknownfields != null) {
//        _unknownfields.writeto(output);
//      }
//#endif
//        }

//#if !google_protobuf_refstruct_compatibility_mode
//        [global::system.diagnostics.debuggernonusercodeattribute]
//        [global::system.codedom.compiler.generatedcode("protoc", null)]
//        void pb::ibuffermessage.internalwriteto(ref pb::writecontext output)
//        {
//            if (id != 0l)
//            {
//                output.writerawtag(8);
//                output.writeint64(id);
//            }
//            if (client_ != null)
//            {
//                output.writerawtag(18);
//                output.writemessage(client);
//            }
//            if (flight_ != null)
//            {
//                output.writerawtag(26);
//                output.writemessage(flight);
//            }
//            passengers_.writeto(ref output, _repeated_passengers_codec);
//            if (_unknownfields != null)
//            {
//                _unknownfields.writeto(ref output);
//            }
//        }
//#endif

//        [global::system.diagnostics.debuggernonusercodeattribute]
//        [global::system.codedom.compiler.generatedcode("protoc", null)]
//        public int calculatesize()
//        {
//            int size = 0;
//            if (id != 0l)
//            {
//                size += 1 + pb::codedoutputstream.computeint64size(id);
//            }
//            if (client_ != null)
//            {
//                size += 1 + pb::codedoutputstream.computemessagesize(client);
//            }
//            if (flight_ != null)
//            {
//                size += 1 + pb::codedoutputstream.computemessagesize(flight);
//            }
//            size += passengers_.calculatesize(_repeated_passengers_codec);
//            if (_unknownfields != null)
//            {
//                size += _unknownfields.calculatesize();
//            }
//            return size;
//        }

//        [global::system.diagnostics.debuggernonusercodeattribute]
//        [global::system.codedom.compiler.generatedcode("protoc", null)]
//        public void mergefrom(booking other)
//        {
//            if (other == null)
//            {
//                return;
//            }
//            if (other.id != 0l)
//            {
//                id = other.id;
//            }
//            if (other.client_ != null)
//            {
//                if (client_ == null)
//                {
//                    client = new global::org.example.client();
//                }
//                client.mergefrom(other.client);
//            }
//            if (other.flight_ != null)
//            {
//                if (flight_ == null)
//                {
//                    flight = new global::org.example.flight();
//                }
//                flight.mergefrom(other.flight);
//            }
//            passengers_.add(other.passengers_);
//            _unknownfields = pb::unknownfieldset.mergefrom(_unknownfields, other._unknownfields);
//        }

//        [global::system.diagnostics.debuggernonusercodeattribute]
//        [global::system.codedom.compiler.generatedcode("protoc", null)]
//        public void mergefrom(pb::codedinputstream input)
//        {
//#if !google_protobuf_refstruct_compatibility_mode
//            input.readrawmessage(this);
//#else
//      uint tag;
//      while ((tag = input.readtag()) != 0) {
//        switch(tag) {
//          default:
//            _unknownfields = pb::unknownfieldset.mergefieldfrom(_unknownfields, input);
//            break;
//          case 8: {
//            id = input.readint64();
//            break;
//          }
//          case 18: {
//            if (client_ == null) {
//              client = new global::org.example.client();
//            }
//            input.readmessage(client);
//            break;
//          }
//          case 26: {
//            if (flight_ == null) {
//              flight = new global::org.example.flight();
//            }
//            input.readmessage(flight);
//            break;
//          }
//          case 34: {
//            passengers_.addentriesfrom(input, _repeated_passengers_codec);
//            break;
//          }
//        }
//      }
//#endif
//        }

//#if !google_protobuf_refstruct_compatibility_mode
//        [global::system.diagnostics.debuggernonusercodeattribute]
//        [global::system.codedom.compiler.generatedcode("protoc", null)]
//        void pb::ibuffermessage.internalmergefrom(ref pb::parsecontext input)
//        {
//            uint tag;
//            while ((tag = input.readtag()) != 0)
//            {
//                switch (tag)
//                {
//                    default:
//                        _unknownfields = pb::unknownfieldset.mergefieldfrom(_unknownfields, ref input);
//                        break;
//                    case 8:
//                        {
//                            id = input.readint64();
//                            break;
//                        }
//                    case 18:
//                        {
//                            if (client_ == null)
//                            {
//                                client = new global::org.example.client();
//                            }
//                            input.readmessage(client);
//                            break;
//                        }
//                    case 26:
//                        {
//                            if (flight_ == null)
//                            {
//                                flight = new global::org.example.flight();
//                            }
//                            input.readmessage(flight);
//                            break;
//                        }
//                    case 34:
//                        {
//                            passengers_.addentriesfrom(ref input, _repeated_passengers_codec);
//                            break;
//                        }
//                }
//            }
//        }
//#endif

//    }

//    public sealed partial class projectrequest : pb::imessage<projectrequest>
//#if !google_protobuf_refstruct_compatibility_mode
//        , pb::ibuffermessage
//#endif
//    {
//        private static readonly pb::messageparser<projectrequest> _parser = new pb::messageparser<projectrequest>(() => new projectrequest());
//        private pb::unknownfieldset _unknownfields;
//        [global::system.diagnostics.debuggernonusercodeattribute]
//        [global::system.codedom.compiler.generatedcode("protoc", null)]
//        public static pb::messageparser<projectrequest> parser { get { return _parser; } }

//        [global::system.diagnostics.debuggernonusercodeattribute]
//        [global::system.codedom.compiler.generatedcode("protoc", null)]
//        public static pbr::messagedescriptor descriptor
//        {
//            get { return global::org.example.projectprotocolv3reflection.descriptor.messagetypes[4]; }
//        }

//        [global::system.diagnostics.debuggernonusercodeattribute]
//        [global::system.codedom.compiler.generatedcode("protoc", null)]
//        pbr::messagedescriptor pb::imessage.descriptor
//        {
//            get { return descriptor; }
//        }

//        [global::system.diagnostics.debuggernonusercodeattribute]
//        [global::system.codedom.compiler.generatedcode("protoc", null)]
//        public projectrequest()
//        {
//            onconstruction();
//        }

//        partial void onconstruction();

//        [global::system.diagnostics.debuggernonusercodeattribute]
//        [global::system.codedom.compiler.generatedcode("protoc", null)]
//        public projectrequest(projectrequest other) : this()
//        {
//            type_ = other.type_;
//            switch (other.payloadcase)
//            {
//                case payloadoneofcase.agency:
//                    agency = other.agency.clone();
//                    break;
//                case payloadoneofcase.flight:
//                    flight = other.flight.clone();
//                    break;
//                case payloadoneofcase.booking:
//                    booking = other.booking.clone();
//                    break;
//            }

//            _unknownfields = pb::unknownfieldset.clone(other._unknownfields);
//        }

//        [global::system.diagnostics.debuggernonusercodeattribute]
//        [global::system.codedom.compiler.generatedcode("protoc", null)]
//        public projectrequest clone()
//        {
//            return new projectrequest(this);
//        }

//        /// <summary>field number for the "type" field.</summary>
//        public const int typefieldnumber = 1;
//        private global::org.example.projectrequest.types.type type_ = global::org.example.projectrequest.types.type.unknown;
//        [global::system.diagnostics.debuggernonusercodeattribute]
//        [global::system.codedom.compiler.generatedcode("protoc", null)]
//        public global::org.example.projectrequest.types.type type
//        {
//            get { return type_; }
//            set
//            {
//                type_ = value;
//            }
//        }

//        /// <summary>field number for the "agency" field.</summary>
//        public const int agencyfieldnumber = 2;
//        [global::system.diagnostics.debuggernonusercodeattribute]
//        [global::system.codedom.compiler.generatedcode("protoc", null)]
//        public global::org.example.agency agency
//        {
//            get { return payloadcase_ == payloadoneofcase.agency ? (global::org.example.agency)payload_ : null; }
//            set
//            {
//                payload_ = value;
//                payloadcase_ = value == null ? payloadoneofcase.none : payloadoneofcase.agency;
//            }
//        }

//        /// <summary>field number for the "flight" field.</summary>
//        public const int flightfieldnumber = 3;
//        [global::system.diagnostics.debuggernonusercodeattribute]
//        [global::system.codedom.compiler.generatedcode("protoc", null)]
//        public global::org.example.flight flight
//        {
//            get { return payloadcase_ == payloadoneofcase.flight ? (global::org.example.flight)payload_ : null; }
//            set
//            {
//                payload_ = value;
//                payloadcase_ = value == null ? payloadoneofcase.none : payloadoneofcase.flight;
//            }
//        }

//        /// <summary>field number for the "booking" field.</summary>
//        public const int bookingfieldnumber = 4;
//        [global::system.diagnostics.debuggernonusercodeattribute]
//        [global::system.codedom.compiler.generatedcode("protoc", null)]
//        public global::org.example.booking booking
//        {
//            get { return payloadcase_ == payloadoneofcase.booking ? (global::org.example.booking)payload_ : null; }
//            set
//            {
//                payload_ = value;
//                payloadcase_ = value == null ? payloadoneofcase.none : payloadoneofcase.booking;
//            }
//        }

//        private object payload_;
//        /// <summary>enum of possible cases for the "payload" oneof.</summary>
//        public enum payloadoneofcase
//        {
//            none = 0,
//            agency = 2,
//            flight = 3,
//            booking = 4,
//        }
//        private payloadoneofcase payloadcase_ = payloadoneofcase.none;
//        [global::system.diagnostics.debuggernonusercodeattribute]
//        [global::system.codedom.compiler.generatedcode("protoc", null)]
//        public payloadoneofcase payloadcase
//        {
//            get { return payloadcase_; }
//        }

//        [global::system.diagnostics.debuggernonusercodeattribute]
//        [global::system.codedom.compiler.generatedcode("protoc", null)]
//        public void clearpayload()
//        {
//            payloadcase_ = payloadoneofcase.none;
//            payload_ = null;
//        }

//        [global::system.diagnostics.debuggernonusercodeattribute]
//        [global::system.codedom.compiler.generatedcode("protoc", null)]
//        public override bool equals(object other)
//        {
//            return equals(other as projectrequest);
//        }

//        [global::system.diagnostics.debuggernonusercodeattribute]
//        [global::system.codedom.compiler.generatedcode("protoc", null)]
//        public bool equals(projectrequest other)
//        {
//            if (referenceequals(other, null))
//            {
//                return false;
//            }
//            if (referenceequals(other, this))
//            {
//                return true;
//            }
//            if (type != other.type) return false;
//            if (!object.equals(agency, other.agency)) return false;
//            if (!object.equals(flight, other.flight)) return false;
//            if (!object.equals(booking, other.booking)) return false;
//            if (payloadcase != other.payloadcase) return false;
//            return equals(_unknownfields, other._unknownfields);
//        }

//        [global::system.diagnostics.debuggernonusercodeattribute]
//        [global::system.codedom.compiler.generatedcode("protoc", null)]
//        public override int gethashcode()
//        {
//            int hash = 1;
//            if (type != global::org.example.projectrequest.types.type.unknown) hash ^= type.gethashcode();
//            if (payloadcase_ == payloadoneofcase.agency) hash ^= agency.gethashcode();
//            if (payloadcase_ == payloadoneofcase.flight) hash ^= flight.gethashcode();
//            if (payloadcase_ == payloadoneofcase.booking) hash ^= booking.gethashcode();
//            hash ^= (int)payloadcase_;
//            if (_unknownfields != null)
//            {
//                hash ^= _unknownfields.gethashcode();
//            }
//            return hash;
//        }

//        [global::system.diagnostics.debuggernonusercodeattribute]
//        [global::system.codedom.compiler.generatedcode("protoc", null)]
//        public override string tostring()
//        {
//            return pb::jsonformatter.todiagnosticstring(this);
//        }

//        [global::system.diagnostics.debuggernonusercodeattribute]
//        [global::system.codedom.compiler.generatedcode("protoc", null)]
//        public void writeto(pb::codedoutputstream output)
//        {
//#if !google_protobuf_refstruct_compatibility_mode
//            output.writerawmessage(this);
//#else
//      if (type != global::org.example.projectrequest.types.type.unknown) {
//        output.writerawtag(8);
//        output.writeenum((int) type);
//      }
//      if (payloadcase_ == payloadoneofcase.agency) {
//        output.writerawtag(18);
//        output.writemessage(agency);
//      }
//      if (payloadcase_ == payloadoneofcase.flight) {
//        output.writerawtag(26);
//        output.writemessage(flight);
//      }
//      if (payloadcase_ == payloadoneofcase.booking) {
//        output.writerawtag(34);
//        output.writemessage(booking);
//      }
//      if (_unknownfields != null) {
//        _unknownfields.writeto(output);
//      }
//#endif
//        }

//#if !google_protobuf_refstruct_compatibility_mode
//        [global::system.diagnostics.debuggernonusercodeattribute]
//        [global::system.codedom.compiler.generatedcode("protoc", null)]
//        void pb::ibuffermessage.internalwriteto(ref pb::writecontext output)
//        {
//            if (type != global::org.example.projectrequest.types.type.unknown)
//            {
//                output.writerawtag(8);
//                output.writeenum((int)type);
//            }
//            if (payloadcase_ == payloadoneofcase.agency)
//            {
//                output.writerawtag(18);
//                output.writemessage(agency);
//            }
//            if (payloadcase_ == payloadoneofcase.flight)
//            {
//                output.writerawtag(26);
//                output.writemessage(flight);
//            }
//            if (payloadcase_ == payloadoneofcase.booking)
//            {
//                output.writerawtag(34);
//                output.writemessage(booking);
//            }
//            if (_unknownfields != null)
//            {
//                _unknownfields.writeto(ref output);
//            }
//        }
//#endif

//        [global::system.diagnostics.debuggernonusercodeattribute]
//        [global::system.codedom.compiler.generatedcode("protoc", null)]
//        public int calculatesize()
//        {
//            int size = 0;
//            if (type != global::org.example.projectrequest.types.type.unknown)
//            {
//                size += 1 + pb::codedoutputstream.computeenumsize((int)type);
//            }
//            if (payloadcase_ == payloadoneofcase.agency)
//            {
//                size += 1 + pb::codedoutputstream.computemessagesize(agency);
//            }
//            if (payloadcase_ == payloadoneofcase.flight)
//            {
//                size += 1 + pb::codedoutputstream.computemessagesize(flight);
//            }
//            if (payloadcase_ == payloadoneofcase.booking)
//            {
//                size += 1 + pb::codedoutputstream.computemessagesize(booking);
//            }
//            if (_unknownfields != null)
//            {
//                size += _unknownfields.calculatesize();
//            }
//            return size;
//        }

//        [global::system.diagnostics.debuggernonusercodeattribute]
//        [global::system.codedom.compiler.generatedcode("protoc", null)]
//        public void mergefrom(projectrequest other)
//        {
//            if (other == null)
//            {
//                return;
//            }
//            if (other.type != global::org.example.projectrequest.types.type.unknown)
//            {
//                type = other.type;
//            }
//            switch (other.payloadcase)
//            {
//                case payloadoneofcase.agency:
//                    if (agency == null)
//                    {
//                        agency = new global::org.example.agency();
//                    }
//                    agency.mergefrom(other.agency);
//                    break;
//                case payloadoneofcase.flight:
//                    if (flight == null)
//                    {
//                        flight = new global::org.example.flight();
//                    }
//                    flight.mergefrom(other.flight);
//                    break;
//                case payloadoneofcase.booking:
//                    if (booking == null)
//                    {
//                        booking = new global::org.example.booking();
//                    }
//                    booking.mergefrom(other.booking);
//                    break;
//            }

//            _unknownfields = pb::unknownfieldset.mergefrom(_unknownfields, other._unknownfields);
//        }

//        [global::system.diagnostics.debuggernonusercodeattribute]
//        [global::system.codedom.compiler.generatedcode("protoc", null)]
//        public void mergefrom(pb::codedinputstream input)
//        {
//#if !google_protobuf_refstruct_compatibility_mode
//            input.readrawmessage(this);
//#else
//      uint tag;
//      while ((tag = input.readtag()) != 0) {
//        switch(tag) {
//          default:
//            _unknownfields = pb::unknownfieldset.mergefieldfrom(_unknownfields, input);
//            break;
//          case 8: {
//            type = (global::org.example.projectrequest.types.type) input.readenum();
//            break;
//          }
//          case 18: {
//            global::org.example.agency subbuilder = new global::org.example.agency();
//            if (payloadcase_ == payloadoneofcase.agency) {
//              subbuilder.mergefrom(agency);
//            }
//            input.readmessage(subbuilder);
//            agency = subbuilder;
//            break;
//          }
//          case 26: {
//            global::org.example.flight subbuilder = new global::org.example.flight();
//            if (payloadcase_ == payloadoneofcase.flight) {
//              subbuilder.mergefrom(flight);
//            }
//            input.readmessage(subbuilder);
//            flight = subbuilder;
//            break;
//          }
//          case 34: {
//            global::org.example.booking subbuilder = new global::org.example.booking();
//            if (payloadcase_ == payloadoneofcase.booking) {
//              subbuilder.mergefrom(booking);
//            }
//            input.readmessage(subbuilder);
//            booking = subbuilder;
//            break;
//          }
//        }
//      }
//#endif
//        }

//#if !google_protobuf_refstruct_compatibility_mode
//        [global::system.diagnostics.debuggernonusercodeattribute]
//        [global::system.codedom.compiler.generatedcode("protoc", null)]
//        void pb::ibuffermessage.internalmergefrom(ref pb::parsecontext input)
//        {
//            uint tag;
//            while ((tag = input.readtag()) != 0)
//            {
//                switch (tag)
//                {
//                    default:
//                        _unknownfields = pb::unknownfieldset.mergefieldfrom(_unknownfields, ref input);
//                        break;
//                    case 8:
//                        {
//                            type = (global::org.example.projectrequest.types.type)input.readenum();
//                            break;
//                        }
//                    case 18:
//                        {
//                            global::org.example.agency subbuilder = new global::org.example.agency();
//                            if (payloadcase_ == payloadoneofcase.agency)
//                            {
//                                subbuilder.mergefrom(agency);
//                            }
//                            input.readmessage(subbuilder);
//                            agency = subbuilder;
//                            break;
//                        }
//                    case 26:
//                        {
//                            global::org.example.flight subbuilder = new global::org.example.flight();
//                            if (payloadcase_ == payloadoneofcase.flight)
//                            {
//                                subbuilder.mergefrom(flight);
//                            }
//                            input.readmessage(subbuilder);
//                            flight = subbuilder;
//                            break;
//                        }
//                    case 34:
//                        {
//                            global::org.example.booking subbuilder = new global::org.example.booking();
//                            if (payloadcase_ == payloadoneofcase.booking)
//                            {
//                                subbuilder.mergefrom(booking);
//                            }
//                            input.readmessage(subbuilder);
//                            booking = subbuilder;
//                            break;
//                        }
//                }
//            }
//        }
//#endif

//        #region nested types
//        /// <summary>container for nested types declared in the projectrequest message type.</summary>
//        [global::system.diagnostics.debuggernonusercodeattribute]
//        [global::system.codedom.compiler.generatedcode("protoc", null)]
//        public static partial class types
//        {
//            public enum type
//            {
//                [pbr::originalname("unknown")] unknown = 0,
//                [pbr::originalname("login")] login = 1,
//                [pbr::originalname("logout")] logout = 2,
//                [pbr::originalname("getallflights")] getallflights = 3,
//                [pbr::originalname("getfilteredflights")] getfilteredflights = 4,
//                [pbr::originalname("getnumberofseats")] getnumberofseats = 5,
//                [pbr::originalname("bookticket")] bookticket = 6,
//            }

//        }
//        #endregion

//    }

//    public sealed partial class projectresponse : pb::imessage<projectresponse>
//#if !google_protobuf_refstruct_compatibility_mode
//        , pb::ibuffermessage
//#endif
//    {
//        private static readonly pb::messageparser<projectresponse> _parser = new pb::messageparser<projectresponse>(() => new projectresponse());
//        private pb::unknownfieldset _unknownfields;
//        [global::system.diagnostics.debuggernonusercodeattribute]
//        [global::system.codedom.compiler.generatedcode("protoc", null)]
//        public static pb::messageparser<projectresponse> parser { get { return _parser; } }

//        [global::system.diagnostics.debuggernonusercodeattribute]
//        [global::system.codedom.compiler.generatedcode("protoc", null)]
//        public static pbr::messagedescriptor descriptor
//        {
//            get { return global::org.example.projectprotocolv3reflection.descriptor.messagetypes[5]; }
//        }

//        [global::system.diagnostics.debuggernonusercodeattribute]
//        [global::system.codedom.compiler.generatedcode("protoc", null)]
//        pbr::messagedescriptor pb::imessage.descriptor
//        {
//            get { return descriptor; }
//        }

//        [global::system.diagnostics.debuggernonusercodeattribute]
//        [global::system.codedom.compiler.generatedcode("protoc", null)]
//        public projectresponse()
//        {
//            onconstruction();
//        }

//        partial void onconstruction();

//        [global::system.diagnostics.debuggernonusercodeattribute]
//        [global::system.codedom.compiler.generatedcode("protoc", null)]
//        public projectresponse(projectresponse other) : this()
//        {
//            type_ = other.type_;
//            error_ = other.error_;
//            flights_ = other.flights_.clone();
//            flight_ = other.flight_ != null ? other.flight_.clone() : null;
//            number_ = other.number_;
//            _unknownfields = pb::unknownfieldset.clone(other._unknownfields);
//        }

//        [global::system.diagnostics.debuggernonusercodeattribute]
//        [global::system.codedom.compiler.generatedcode("protoc", null)]
//        public projectresponse clone()
//        {
//            return new projectresponse(this);
//        }

//        /// <summary>field number for the "type" field.</summary>
//        public const int typefieldnumber = 1;
//        private global::org.example.projectresponse.types.type type_ = global::org.example.projectresponse.types.type.unknown;
//        [global::system.diagnostics.debuggernonusercodeattribute]
//        [global::system.codedom.compiler.generatedcode("protoc", null)]
//        public global::org.example.projectresponse.types.type type
//        {
//            get { return type_; }
//            set
//            {
//                type_ = value;
//            }
//        }

//        /// <summary>field number for the "error" field.</summary>
//        public const int errorfieldnumber = 2;
//        private string error_ = "";
//        [global::system.diagnostics.debuggernonusercodeattribute]
//        [global::system.codedom.compiler.generatedcode("protoc", null)]
//        public string error
//        {
//            get { return error_; }
//            set
//            {
//                error_ = pb::protopreconditions.checknotnull(value, "value");
//            }
//        }

//        /// <summary>field number for the "flights" field.</summary>
//        public const int flightsfieldnumber = 3;
//        private static readonly pb::fieldcodec<global::org.example.flight> _repeated_flights_codec
//            = pb::fieldcodec.formessage(26, global::org.example.flight.parser);
//        private readonly pbc::repeatedfield<global::org.example.flight> flights_ = new pbc::repeatedfield<global::org.example.flight>();
//        [global::system.diagnostics.debuggernonusercodeattribute]
//        [global::system.codedom.compiler.generatedcode("protoc", null)]
//        public pbc::repeatedfield<global::org.example.flight> flights
//        {
//            get { return flights_; }
//        }

//        /// <summary>field number for the "flight" field.</summary>
//        public const int flightfieldnumber = 4;
//        private global::org.example.flight flight_;
//        [global::system.diagnostics.debuggernonusercodeattribute]
//        [global::system.codedom.compiler.generatedcode("protoc", null)]
//        public global::org.example.flight flight
//        {
//            get { return flight_; }
//            set
//            {
//                flight_ = value;
//            }
//        }

//        /// <summary>field number for the "number" field.</summary>
//        public const int numberfieldnumber = 5;
//        private int number_;
//        [global::system.diagnostics.debuggernonusercodeattribute]
//        [global::system.codedom.compiler.generatedcode("protoc", null)]
//        public int number
//        {
//            get { return number_; }
//            set
//            {
//                number_ = value;
//            }
//        }

//        [global::system.diagnostics.debuggernonusercodeattribute]
//        [global::system.codedom.compiler.generatedcode("protoc", null)]
//        public override bool equals(object other)
//        {
//            return equals(other as projectresponse);
//        }

//        [global::system.diagnostics.debuggernonusercodeattribute]
//        [global::system.codedom.compiler.generatedcode("protoc", null)]
//        public bool equals(projectresponse other)
//        {
//            if (referenceequals(other, null))
//            {
//                return false;
//            }
//            if (referenceequals(other, this))
//            {
//                return true;
//            }
//            if (type != other.type) return false;
//            if (error != other.error) return false;
//            if (!flights_.equals(other.flights_)) return false;
//            if (!object.equals(flight, other.flight)) return false;
//            if (number != other.number) return false;
//            return equals(_unknownfields, other._unknownfields);
//        }

//        [global::system.diagnostics.debuggernonusercodeattribute]
//        [global::system.codedom.compiler.generatedcode("protoc", null)]
//        public override int gethashcode()
//        {
//            int hash = 1;
//            if (type != global::org.example.projectresponse.types.type.unknown) hash ^= type.gethashcode();
//            if (error.length != 0) hash ^= error.gethashcode();
//            hash ^= flights_.gethashcode();
//            if (flight_ != null) hash ^= flight.gethashcode();
//            if (number != 0) hash ^= number.gethashcode();
//            if (_unknownfields != null)
//            {
//                hash ^= _unknownfields.gethashcode();
//            }
//            return hash;
//        }

//        [global::system.diagnostics.debuggernonusercodeattribute]
//        [global::system.codedom.compiler.generatedcode("protoc", null)]
//        public override string tostring()
//        {
//            return pb::jsonformatter.todiagnosticstring(this);
//        }

//        [global::system.diagnostics.debuggernonusercodeattribute]
//        [global::system.codedom.compiler.generatedcode("protoc", null)]
//        public void writeto(pb::codedoutputstream output)
//        {
//#if !google_protobuf_refstruct_compatibility_mode
//            output.writerawmessage(this);
//#else
//      if (type != global::org.example.projectresponse.types.type.unknown) {
//        output.writerawtag(8);
//        output.writeenum((int) type);
//      }
//      if (error.length != 0) {
//        output.writerawtag(18);
//        output.writestring(error);
//      }
//      flights_.writeto(output, _repeated_flights_codec);
//      if (flight_ != null) {
//        output.writerawtag(34);
//        output.writemessage(flight);
//      }
//      if (number != 0) {
//        output.writerawtag(40);
//        output.writeint32(number);
//      }
//      if (_unknownfields != null) {
//        _unknownfields.writeto(output);
//      }
//#endif
//        }

//#if !google_protobuf_refstruct_compatibility_mode
//        [global::system.diagnostics.debuggernonusercodeattribute]
//        [global::system.codedom.compiler.generatedcode("protoc", null)]
//        void pb::ibuffermessage.internalwriteto(ref pb::writecontext output)
//        {
//            if (type != global::org.example.projectresponse.types.type.unknown)
//            {
//                output.writerawtag(8);
//                output.writeenum((int)type);
//            }
//            if (error.length != 0)
//            {
//                output.writerawtag(18);
//                output.writestring(error);
//            }
//            flights_.writeto(ref output, _repeated_flights_codec);
//            if (flight_ != null)
//            {
//                output.writerawtag(34);
//                output.writemessage(flight);
//            }
//            if (number != 0)
//            {
//                output.writerawtag(40);
//                output.writeint32(number);
//            }
//            if (_unknownfields != null)
//            {
//                _unknownfields.writeto(ref output);
//            }
//        }
//#endif

//        [global::system.diagnostics.debuggernonusercodeattribute]
//        [global::system.codedom.compiler.generatedcode("protoc", null)]
//        public int calculatesize()
//        {
//            int size = 0;
//            if (type != global::org.example.projectresponse.types.type.unknown)
//            {
//                size += 1 + pb::codedoutputstream.computeenumsize((int)type);
//            }
//            if (error.length != 0)
//            {
//                size += 1 + pb::codedoutputstream.computestringsize(error);
//            }
//            size += flights_.calculatesize(_repeated_flights_codec);
//            if (flight_ != null)
//            {
//                size += 1 + pb::codedoutputstream.computemessagesize(flight);
//            }
//            if (number != 0)
//            {
//                size += 1 + pb::codedoutputstream.computeint32size(number);
//            }
//            if (_unknownfields != null)
//            {
//                size += _unknownfields.calculatesize();
//            }
//            return size;
//        }

//        [global::system.diagnostics.debuggernonusercodeattribute]
//        [global::system.codedom.compiler.generatedcode("protoc", null)]
//        public void mergefrom(projectresponse other)
//        {
//            if (other == null)
//            {
//                return;
//            }
//            if (other.type != global::org.example.projectresponse.types.type.unknown)
//            {
//                type = other.type;
//            }
//            if (other.error.length != 0)
//            {
//                error = other.error;
//            }
//            flights_.add(other.flights_);
//            if (other.flight_ != null)
//            {
//                if (flight_ == null)
//                {
//                    flight = new global::org.example.flight();
//                }
//                flight.mergefrom(other.flight);
//            }
//            if (other.number != 0)
//            {
//                number = other.number;
//            }
//            _unknownfields = pb::unknownfieldset.mergefrom(_unknownfields, other._unknownfields);
//        }

//        [global::system.diagnostics.debuggernonusercodeattribute]
//        [global::system.codedom.compiler.generatedcode("protoc", null)]
//        public void mergefrom(pb::codedinputstream input)
//        {
//#if !google_protobuf_refstruct_compatibility_mode
//            input.readrawmessage(this);
//#else
//      uint tag;
//      while ((tag = input.readtag()) != 0) {
//        switch(tag) {
//          default:
//            _unknownfields = pb::unknownfieldset.mergefieldfrom(_unknownfields, input);
//            break;
//          case 8: {
//            type = (global::org.example.projectresponse.types.type) input.readenum();
//            break;
//          }
//          case 18: {
//            error = input.readstring();
//            break;
//          }
//          case 26: {
//            flights_.addentriesfrom(input, _repeated_flights_codec);
//            break;
//          }
//          case 34: {
//            if (flight_ == null) {
//              flight = new global::org.example.flight();
//            }
//            input.readmessage(flight);
//            break;
//          }
//          case 40: {
//            number = input.readint32();
//            break;
//          }
//        }
//      }
//#endif
//        }

//#if !google_protobuf_refstruct_compatibility_mode
//        [global::system.diagnostics.debuggernonusercodeattribute]
//        [global::system.codedom.compiler.generatedcode("protoc", null)]
//        void pb::ibuffermessage.internalmergefrom(ref pb::parsecontext input)
//        {
//            uint tag;
//            while ((tag = input.readtag()) != 0)
//            {
//                switch (tag)
//                {
//                    default:
//                        _unknownfields = pb::unknownfieldset.mergefieldfrom(_unknownfields, ref input);
//                        break;
//                    case 8:
//                        {
//                            type = (global::org.example.projectresponse.types.type)input.readenum();
//                            break;
//                        }
//                    case 18:
//                        {
//                            error = input.readstring();
//                            break;
//                        }
//                    case 26:
//                        {
//                            flights_.addentriesfrom(ref input, _repeated_flights_codec);
//                            break;
//                        }
//                    case 34:
//                        {
//                            if (flight_ == null)
//                            {
//                                flight = new global::org.example.flight();
//                            }
//                            input.readmessage(flight);
//                            break;
//                        }
//                    case 40:
//                        {
//                            number = input.readint32();
//                            break;
//                        }
//                }
//            }
//        }
//#endif

//        #region nested types
//        /// <summary>container for nested types declared in the projectresponse message type.</summary>
//        [global::system.diagnostics.debuggernonusercodeattribute]
//        [global::system.codedom.compiler.generatedcode("protoc", null)]
//        public static partial class types
//        {
//            public enum type
//            {
//                [pbr::originalname("unknown")] unknown = 0,
//                [pbr::originalname("ok")] ok = 1,
//                [pbr::originalname("error")] error = 2,
//                [pbr::originalname("flights")] flights = 3,
//                [pbr::originalname("filteredflights")] filteredflights = 4,
//                [pbr::originalname("numberofseats")] numberofseats = 5,
//                [pbr::originalname("booking")] booking = 6,
//            }

//        }
//        #endregion

//    }

//    #endregion

//}

//#endregion designer generated code
